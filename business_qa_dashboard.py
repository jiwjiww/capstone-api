import pandas as pd
from sqlalchemy import create_engine
import streamlit as st
import altair as alt  # ‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö PostgreSQL ‡∏ú‡πà‡∏≤‡∏ô SQLAlchemy
connection_string = "postgresql+psycopg2://postgres:postgres@localhost:5432/aqi_project"
engine = create_engine(connection_string)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def get_data_from_sql(query, params=None):
    try:
        connection = engine.raw_connection()
        df = pd.read_sql_query(query, con=connection, params=params)
        connection.close()
        return df
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return pd.DataFrame()  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ DataFrame ‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ô Streamlit Dashboard
def show_dashboard():
    st.title("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (AQI)")

    # ‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
    cities = ['Bangkok', 'Nakhon Pathom', 'Pathum Thani']
    selected_city = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î:", cities)

    queries = {
        "‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô AQI ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ": """
            SELECT MAX(aqi_value) AS highest_aqi
            FROM aqi_data
            WHERE timestamp >= NOW() - INTERVAL '7 days' 
            AND city = %(city)s;
        """,
        "‡∏Ñ‡πà‡∏≤‡∏ù‡∏∏‡πà‡∏ô AQI ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤": """
            SELECT MIN(aqi_value) AS lowest_aqi
            FROM aqi_data
            WHERE timestamp >= NOW() - INTERVAL '3 months' 
            AND city = %(city)s;
        """,
        "‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ AQI ‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ": """
            SELECT AVG(aqi_value) AS avg_aqi
            FROM aqi_data
            WHERE timestamp >= NOW() - INTERVAL '7 days' 
            AND city = %(city)s;
        """,
        "‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà AQI ‡πÄ‡∏Å‡∏¥‡∏ô 100 ‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ": """
            SELECT COUNT(*) AS days_high_aqi
            FROM aqi_data
            WHERE aqi_value > 100
            AND timestamp >= DATE_TRUNC('month', NOW()) 
            AND city = %(city)s;
        """,
    }

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å Query
    for question, query in queries.items():
        st.subheader(question)
        df = get_data_from_sql(query, {"city": selected_city})
        if not df.empty:
            st.write(df)
        else:
            st.write("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

    # ‚úÖ **‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà 5: ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü AQI ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô**
    st.subheader(f"üìà ‡∏Ñ‡πà‡∏≤ AQI ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ô‡∏µ‡πâ ({selected_city})")
    
    # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á SQL ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• AQI ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
    query_graph = """
        SELECT DATE(timestamp) AS date, AVG(aqi_value) AS avg_aqi
        FROM aqi_data
        WHERE timestamp >= NOW() - INTERVAL '7 days'  
        AND city = %(city)s
        GROUP BY DATE(timestamp)
        ORDER BY date;
    """
    
    df_graph = get_data_from_sql(query_graph, {"city": selected_city})
    
    if not df_graph.empty:
        # ‡πÉ‡∏ä‡πâ Altair ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≤‡∏ü
        chart = alt.Chart(df_graph).mark_line(point=True).encode(
            x="date:T",
            y="avg_aqi:Q",
            tooltip=["date:T", "avg_aqi:Q"]
        ).properties(title="‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡πà‡∏≤ AQI ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")

        st.altair_chart(chart, use_container_width=True)
    else:
        st.write("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

if __name__ == "__main__":
    show_dashboard()
